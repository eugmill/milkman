<div class="container">
  <div class="row">
    <div class="col-xs-12 text-center">
      <h1>How it all works</h1>
      <h2 class="subTitle">An Overview of the Magic that powers MilkTrackr</h2>
    </div>
  </div>
  <div class="row">
    <div class="col-sm-4">
      <h2 class="subTitle">The Problem</h2>
      <p>Living with roommates is great. They're good company, help with the household chores, and widen your circle of friends. However, they also drink your milk. How many times have you woken up and gone to the fridge, only to find three drops of milk left in an empty carton, waiting to be thrown out. It's beyond frustrating. We feel your pain.</p>
    </div>
    <div class="col-sm-4">
      <img src="assets/cowcarton.png" class="cow img-responsive" alt="Cow">
    </div>
    <div class="col-sm-4">
      <h2 class="subTitle">The Solution</h2>
      We've designed a hardware-software solution to measure your apartment’s milk consumption over time. Using cutting-edge technology, our MilkSensor(TM) system relays information to the MilkTrackr dashboard, where you can see how much milk is left in your fridge, as well as data about your milk consumption. And if you're on the go, MilkTrackr can text you if your milk levels are getting low. Awesome.
    </div>
  </div>
  <div class="row">
    <div class="container white">
      <div class="row">
        <div class="col-xs-12">
          <h1>The Hardware</h1>
          <div class="row">
            <div class="col-sm-8">
              <h2>An Overview</h2>
              <p>To effectively measure milk consumption over time, we needed to determine an analog sensor that could plug into the Arduino. We briefly considered a capacitive liquid sensor but settled on a mass sensor for simplicity and accuracy. By following a couple guides online, we ended up using the sensor in this scale after stripping out all other electronics.</p>
              <p>The first iteration of the circuit consisted of using the Arduino to measure the voltage across the mass sensor, which acts as a potentiometer with a resistance that varies linearly with the force applied to the top. The Arduino samples the voltage within a range of 0-5 volts and converts it to a digital signal with values from 0-1024. For this project, we called this Arduino unit of measurement a “raw”.</p>
            </div>
            <div class="col-sm-4">
              <h2>Circuit Diagram</h2>
              <div>
                <img src="assets/milkman_basic_circuit.png" class="img-responsive" alt="Simple Circuit">
              </div>
            </div>
          </div>
          <div class="row">
            <div class="col-xs-12">
              <h2>Proof of Concept</h2>
            </div>
          </div>
          <div class="row">
            <div class="col-sm-4">
              <div>
                <img src="assets/first_iteration_pic.jpg" class="img-responsive img-rounded"alt="So many wires!">
              </div>
            </div>
            <div class="col-sm-8">
              <p>However, to get the hardware working correctly, we needed to add an amplifier to properly scale the analog signal to a range that the Arduino could measure precisely. Without the amplifier, placing anything from 0-6 kg on the mass sensor would result in the same raw value being measured by the Arduino. In addition to the amplifier, we added an Adafruit CC3000 WiFi Shield so the Arduino can communication with our server over WiFi.</p>
              <h2>Programming the Arduino</h2>
              <p>The arduino sketch itself was pretty basic, based on the tutorial provided by <a href="http://learn.adafruit.com/low-power-wifi-datalogging">Tony DiCola</a>. When turned on, the Arduino connects to wifi and sends off its first reading. It then sleeps for some period (30 minutes for now), until it has to send another reading. For the proof of concept we ran the Arduino sketch without any optimizations for power consumption. When deployed, we will have to update the sketch to sleep in between readings.</p>
            </div>
          </div>
        </div>
      </div>
      <div class="row">
        <div class="col-xs-4">
          <h2>Working Prototype</h2>
          <p>Once we had the proof of concept up and running, we secured the Arduino and breadboard in a cardboard case and ran wire through the lid where we mounted the mass sensor platform. We ran the electrical cord through the side of the container and sealed the lid with plenty of electrical tape.The result is a secure prototype that can comfortably fit in any refrigerator for all your milk tracking needs!</p>
        </div>
        <div class="col-xs-4">
          <img src="assets/second_iteration_pic.jpg" class="img-responsive img-rounded"alt="A little cleaner!">
          <p></p>
        </div>
        <div class="col-xs-4">
          <img src="assets/third_iteration_pic.jpg" class="img-responsive img-rounded"alt="A little cleaner!">
          <p></p>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <h1>The Software</h1>
    <div class="row">
      <div class="col-sm-6">
        <h2>An Overview</h2>
          <p>On the software side, MilkTrackr is built on Ruby on Rails with Bootstrap on the front-end and a PostgreSQL database for the back-end. We use several models, all built in Ruby, to capture new measurements, convert reading to grams and liters, and detect if a new milk container has been purchased. Once the data is securely stored in the MilkTrackr database, we use <a href="http://www.highcharts.com/">Highcharts Javascript libraries</a> to put together the interactive dashboards that our users know and love!</p>
      </div>
      <div class="col-sm-6">
        <img src="assets/code_pic.jpg" class="img-responsive img-rounded" alt="Code">
        <p></p>
      </div>
    </div>
    <div class="row white">
      <div class="col-sm-6">
        <h3>New Container Detection</h3>
        <p>An interesting coding problem we tackled was new container detection. We wanted our application to instantly recognize if a new milk carton had been purchased to replace the old. However, we needed to account of some noise that the mass sensor introduced into our reading and also filter out measurement taken while the milk container was off the platform. The code on the right shows how we accomplished this feat by filtering out readings close to zero and adding error tolerance before declaring that a new container had been added.</p>
        <img src="assets/newcontainer.png" class="img-responsive img-rounded"alt="A little cleaner!">
        <p></p>
      </div>
      <div class="col-sm-6">
        <h4>Code Snippet</h4>
        <div class="well">
  def is_new_container?   # How to determine if there's a new container?<br>
    &nbsp&nbsp&nbsp&nbsp# It is a new container if this is the first measurement taken<br>
    &nbsp&nbsp&nbsp&nbspreturn true if Measurement.all.count == 0<br><br>

    &nbsp&nbsp&nbsp&nbsp# Get the last measurement above the minimum threshold<br>
    &nbsp&nbsp&nbsp&nbspmin_threshold = 10.0 # grams<br>
    &nbsp&nbsp&nbsp&nbsplast_record = Measurement.where("mass_value > ?",min_threshold).order(read_time: :desc).limit(1)<br><br>

    &nbsp&nbsp&nbsp&nbspif last_record.empty?<br>
      &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspreturn true<br>
    &nbsp&nbsp&nbsp&nbspelse<br>
    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp# Adjust for the current reading being noisily above the last reading<br>
     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspnoise_tolerance = 5.0 # grams<br>
     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspMeasurement.calculate_grams_from_raw(self.raw) > last_record[0].mass_value + noise_tolerance<br>
    &nbsp&nbsp&nbsp&nbspend<br>
  end<br>
        <p></p>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-xs-12 text-center">
      <p></p>
      <img src="assets/instagram.jpg" class="img-responsive img-rounded cow" alt="Code">
      <h2> We're glad you had a chance to check out MilkTrackr. Look out for more interesting projects from the MilkMen very soon...</h2>
    </div>
  </div>
  <div class="row">
    <h1>Photos</h1>
    <div class="col-sm-12">
    <a class="fancybox" rel="group" href="assets/photos/pic1.jpg"><img src="assets/photos/pic1-thumb.jpg"  alt="" /></a>
    <a class="fancybox" rel="group" href="assets/photos/pic2.jpg"><img src="assets/photos/pic2-thumb.jpg" alt="" /></a>
    <a class="fancybox" rel="group" href="assets/photos/pic3.jpg"><img src="assets/photos/pic3-thumb.jpg" alt="" /></a>
    <a class="fancybox" rel="group" href="assets/photos/pic4.jpg"><img src="assets/photos/pic4-thumb.jpg" alt="" /></a>
    <a class="fancybox" rel="group" href="assets/photos/pic5.jpg"><img src="assets/photos/pic5-thumb.jpg" alt="" /></a>
    <a class="fancybox" rel="group" href="assets/photos/pic6.jpg"><img src="assets/photos/pic6-thumb.jpg" alt="" /></a>
    <a class="fancybox" rel="group" href="assets/photos/pic7.jpg"><img src="assets/photos/pic7-thumb.jpg" alt="" /></a>
    <a class="fancybox" rel="group" href="assets/photos/pic8.jpg"><img src="assets/photos/pic8-thumb.jpg" alt="" /></a>
  </div>
  </div>
  <div class="container">
    <hr>
    <p class="centered"> Milk designed by Erin Agnoli from the Noun Project </br>
    Cow designed by Anuar Zhumaev from the Noun Project</p>


  </div><!-- /container -->
</div>
